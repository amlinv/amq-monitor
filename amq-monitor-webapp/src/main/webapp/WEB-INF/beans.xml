<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2015 AML Innovation & Consulting LLC
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:jaxrs="http://cxf.apache.org/jaxrs"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://cxf.apache.org/jaxrs
http://cxf.apache.org/schemas/jaxrs.xsd">

  <import resource="classpath:META-INF/cxf/cxf.xml" />

  <context:property-placeholder/>
  <context:annotation-config/>
  <bean class="org.springframework.web.context.support.ServletContextPropertyPlaceholderConfigurer"/>
  <bean class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"/>

    <bean id="appMainThreadPoolExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
        <property name="corePoolSize" value="5" />
        <property name="maxPoolSize"  value="100" />
        <property name="keepAliveSeconds" value="60" />
        <property name="threadNamePrefix" value="amq-monitor-executor" />
    </bean>
    
    <bean id="brokerTopologyRegistry" class="com.amlinv.activemq.topo.registry.BrokerTopologyRegistry">
        <property name="listeners">
            <array>
                <value>#{topologyStatsCollectionManager.topologyRegistryListener}</value>
                <value>#{topologyDestinationDiscoveryManager.topologyRegistryListener}</value>
            </array>
        </property>
    </bean>

    <!--             -->
    <!-- PERSISTENCE -->
    <!--             -->
    <bean id="monitorPersistence" class="com.amlinv.activemq.persistence.impl.JsonFileApplicationPersistenceAdapter"
          init-method="loadOnInit" destroy-method="saveOnDestory">
        <property name="adapterV1" ref="monitorPersistenceV1" />
        <property name="adapterV2" ref="monitorPersistenceV2" />
    </bean>
    <bean id="monitorPersistenceV1"
          class="com.amlinv.activemq.persistence.impl.JsonFileApplicationPersistenceAdapterV1">
        <constructor-arg value="${data.dir:.}/${monitor.persistence.v1.file:monitor.json}" />
        <property name="topologyRegistry" ref="brokerTopologyRegistry" />
        <property name="topologyStateFactory" ref="topologyStateFactory" />
    </bean>
    <bean id="monitorPersistenceV2"
          class="com.amlinv.activemq.persistence.impl.JsonFileApplicationPersistenceAdapterV2">
        <constructor-arg value="${data.dir:.}/${monitor.persistence.v2.file:monitor.json.v2}" />
        <property name="topologyRegistry" ref="brokerTopologyRegistry" />
        <property name="topologyStateFactory" ref="topologyStateFactory" />
    </bean>

    <bean id="monitorWebController" class="com.amlinv.activemq.monitor.web.MonitorWebController"
          init-method="init" destroy-method="shutdown">
        <property name="websocketBrokerStatsFeed" ref="websocketBrokerStatsFeed" />
        <property name="brokerTopologyRegistry" ref="brokerTopologyRegistry" />
        <property name="scheduler" ref="scheduler" />
        <property name="topologyStateFactory" ref="topologyStateFactory" />
    </bean>

    <!-- STATISTICS REGISTRY -->
    <bean id="queueStatisticsRegistry" class="com.amlinv.activemq.stats.QueueStatisticsRegistry" />
    <bean id="queueStatisticsRegistryListener" factory-bean="queueStatisticsRegistry" factory-method="getQueueRegistryListener" />

    <!-- STATISTICS COLLECTION -->
    <bean id="topologyStatsCollectionManager" class="com.amlinv.activemq.monitor.topo.stats.TopologyStatsCollectionManager">
        <property name="brokerPollerManagerFactory" ref="brokerPollerManagerFactory" />
        <property name="listenerFactory" ref="monitorWebControllerListenerFactory" />
    </bean>

    <bean id="monitorWebControllerListenerFactory"
          class="com.amlinv.activemq.monitor.activemq.impl.FixedListenerActiveMQBrokerPollerListenerFactory">
        <constructor-arg index="0" ref="websocketBrokerStatsFeed" />
    </bean>

    <bean id="brokerPollerManagerFactory" class="com.amlinv.activemq.stats.polling.impl.BrokerPollerManagerFactoryImpl">
        <property name="jmxActiveMQUtil" ref="jmxActiveMQUtil" />
        <property name="scheduler" ref="scheduler" />
    </bean>
    <bean id="jmxActiveMQUtil" class="com.amlinv.activemq.topo.jmxutil.polling.JmxActiveMQUtil2" />

    <bean id="topologyDestinationDiscoveryManager"
          class="com.amlinv.activemq.monitor.topo.stats.TopologyDestinationDiscoveryManager">
        <property name="managerFactory" ref="brokerDiscoveryManagerFactory" />
        <property name="discovererFactory" ref="discovererFactory" />
        <property name="scheduledThreadPoolExecutor" ref="scheduledThreadPoolExecutor" />
    </bean>
    <bean id="brokerDiscoveryManagerFactory"
          class="com.amlinv.activemq.monitor.topo.stats.impl.DefaultBrokerDestinationDiscovererFactory" />
    <bean id="discovererFactory"
          class="com.amlinv.activemq.monitor.topo.stats.impl.DefaultMBeanDestinationDiscovererFactory">
        <property name="jmxActiveMQUtil" ref="jmxActiveMQUtil" />
    </bean>
    <bean id="topologyStateFactory" class="com.amlinv.activemq.monitor.impl.DefaultTopologyStateFactory" />

    <bean id="scheduledThreadPoolExecutor" class="java.util.concurrent.ScheduledThreadPoolExecutor"
          destroy-method="shutdown">
        <constructor-arg index="0" value="32" />
    </bean>

    <!-- MONITORING WEBSOCKET -->
    <bean id="monitorWebsocketRegistry" class="com.amlinv.activemq.monitor.web.MonitorWebsocketRegistry" />
    <bean id="websocketBrokerStatsFeed" class="com.amlinv.activemq.monitor.web.MonitorWebsocketBrokerStatsFeed">
        <property name="websocketRegistry" ref="monitorWebsocketRegistry" />
        <property name="queueStatisticsRegistry" ref="queueStatisticsRegistry" />
        <!--<property name="metricRegistry" ref="metricRegistry" />-->
    </bean>
    <bean id="websocketBrokerStatsFeedListener" factory-bean="websocketBrokerStatsFeed" factory-method="getQueueRegistryListener" />

    <!-- PROCESS SCHEDULING -->
    <bean id="scheduler" class="com.amlinv.javasched.impl.RoundRobinScheduler" init-method="start" />

    <!-- CLASS STATIC FIELD INJECTORS -->
    <bean class="com.amlinv.activemq.monitor.web.MonitorWebsocketStaticInjector">
        <property name="registry" ref="monitorWebsocketRegistry" />
        <property name="scheduler" ref="scheduler" />
    </bean>


    <!--                    -->
    <!-- WEB SERVICES BEANS -->
    <!--                    -->
    <jaxrs:server id="services" address="/">
        <jaxrs:serviceBeans>

            <ref bean="monitorWebController" />

        </jaxrs:serviceBeans>
        <jaxrs:providers>
            <bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider"/>
        </jaxrs:providers>
    </jaxrs:server>
</beans>
